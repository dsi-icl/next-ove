### OPENAPI SPECIFICATION

GET {{base-client-url}}

> {%
  import {validateStatus, validateContentType} from "../utils";

  validateStatus(200, response, client);
  validateContentType("text/html", response, client);
%}

### STATUS

GET {{rest-client-url}}/status
Authorization: Basic {{token}}

> {%
  import {
    validateStatus,
    validateContentType,
    validateResponseType
  } from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateResponseType("boolean", response, client);
%}

### tRPC

GET {{trpc-client-url}}/getStatus?input={"json": {}}
Authorization: Basic {{token}}

> {%
  import {
    validateStatus,
    validateResponseType,
    validateContentType
  } from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateResponseType("boolean", response, client, true);
%}

### INFO - default

GET {{rest-client-url}}/info
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["type", "version", "time"], response, client);
%}

### tRPC

GET {{trpc-client-url}}/getInfo?input={"json": {}}
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["type", "version", "time"], response, client, true);
%}

### INFO - general

GET {{rest-client-url}}/info?type=general
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["type", "version", "time"], response, client);
%}

###

GET {{trpc-client-url}}/getInfo?input={"json": {"type": "general"}}
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["time", "version", "type"], response, client, true);
%}

### INFO - system

GET {{rest-client-url}}/info?type=system
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["system", "bios", "baseboard", "chassis", "type"], response, client);
%}

### tRPC

GET {{trpc-client-url}}/getInfo?input={"json": {"type": "system"}}
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["system", "bios", "baseboard", "chassis", "type"], response, client, true);
%}

### INFO - cpu

GET {{rest-client-url}}/info?type=cpu
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["cpu", "flags", "cache", "currentSpeed", "temperature", "type"], response, client);
%}

### tRPC

GET {{trpc-client-url}}/getInfo?input={"json": {"type": "cpu"}}
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["cpu", "flags", "cache", "currentSpeed", "temperature", "type"], response, client, true);
%}

### INFO - memory

GET {{rest-client-url}}/info?type=memory
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["memory", "layout", "type"], response, client);
%}

### tRPC

GET {{trpc-client-url}}/getInfo?input={"json": {"type": "memory"}}
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["memory", "layout", "type"], response, client, true);
%}

### INFO - battery

GET {{rest-client-url}}/info?type=battery
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["battery", "type"], response, client);
%}

### tRPC

GET {{trpc-client-url}}/getInfo?input={"json": {"type": "battery"}}
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["battery", "type"], response, client, true);
%}

### INFO - graphics

GET {{rest-client-url}}/info?type=graphics
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["graphics", "type"], response, client);
%}

### tRPC

GET {{trpc-client-url}}/getInfo?input={"json": {"type": "graphics"}}
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["graphics", "type"], response, client, true);
%}

### INFO - os

GET {{rest-client-url}}/info?type=os
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["os", "uuid", "versions", "shell", "users", "type"], response, client);
%}

### tRPC

GET {{trpc-client-url}}/getInfo?input={"json": {"type": "os"}}
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["os", "uuid", "versions", "shell", "users", "type"], response, client, true);
%}

### INFO - processes

GET {{rest-client-url}}/info?type=processes
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["currentLoad", "fullLoad", "processes", "services", "processLoad", "type"], response, client);
%}

### tRPC

GET {{trpc-client-url}}/getInfo?input={"json": {"type": "processes"}}
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["currentLoad", "fullLoad", "processes", "services", "processLoad", "type"], response, client, true);
%}

### INFO - fs

GET {{rest-client-url}}/info?type=fs
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["diskLayout", "blockDevices", "disksIO", "fsSize", "fsOpenFiles", "fsStats", "type"], response, client);
%}

### tRPC

GET {{trpc-client-url}}/getInfo?input={"json": {"type": "fs"}}
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["diskLayout", "blockDevices", "disksIO", "fsSize", "fsOpenFiles", "fsStats", "type"], response, client, true);
%}

### INFO - usb

GET {{rest-client-url}}/info?type=usb
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["usb", "type"], response, client);
%}

### tRPC

GET {{trpc-client-url}}/getInfo?input={"json": {"type": "usb"}}
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["usb", "type"], response, client, true);
%}

### INFO - printer

GET {{rest-client-url}}/info?type=printer
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["printer", "type"], response, client);
%}

### tRPC

GET {{trpc-client-url}}/getInfo?input={"json": {"type": "printer"}}
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["printer", "type"], response, client, true);
%}

### INFO - audio

GET {{rest-client-url}}/info?type=audio
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["audio", "type"], response, client);
%}

### tRPC

GET {{trpc-client-url}}/getInfo?input={"json": {"type": "audio"}}
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["audio", "type"], response, client, true);
%}

### INFO - network

GET {{rest-client-url}}/info?type=network
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["interfaces", "interfaceDefault", "gatewayDefault", "stats", "connections", "inetChecksite", "inetLatency", "type"], response, client);
%}

### tRPC

GET {{trpc-client-url}}/getInfo?input={"json": {"type": "network"}}
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["interfaces", "interfaceDefault", "gatewayDefault", "stats", "connections", "inetChecksite", "inetLatency", "type"], response, client, true);
%}

### INFO - wifi

GET {{rest-client-url}}/info?type=wifi
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["networks", "interfaces", "connections", "type"], response, client);
%}

### tRPC

GET {{trpc-client-url}}/getInfo?input={"json": {"type": "wifi"}}
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["networks", "interfaces", "connections", "type"], response, client, true);
%}

### INFO - bluetooth

GET {{rest-client-url}}/info?type=bluetooth
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["devices", "type"], response, client);
%}

### tRPC

GET {{trpc-client-url}}/getInfo?input={"json": {"type": "bluetooth"}}
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["devices", "type"], response, client, true);
%}

### INFO - docker

GET {{rest-client-url}}/info?type=docker
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["docker", "images", "containers", "containerStats", "containerProcesses", "volumes", "type"], response, client);
%}

### tRPC

GET {{trpc-client-url}}/getInfo?input={"json": {"type": "docker"}}
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["docker", "images", "containers", "containerStats", "containerProcesses", "volumes", "type"], response, client, true);
%}

### INFO - vbox

GET {{rest-client-url}}/info?type=vbox
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["vbox", "type"], response, client);
%}

### tRPC

GET {{trpc-client-url}}/getInfo?input={"json": {"type": "vbox"}}
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["vbox", "type"], response, client, true);
%}

### INFO - invalid

GET {{rest-client-url}}/info?type=invalid
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["version", "time", "type"], response, client);
%}

### tRPC

GET {{trpc-client-url}}/getInfo?input={"json": {"type": "invalid"}}
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["version", "time", "type"], response, client, true);
%}

### Shutdown

#POST {{rest-client-url}}/shutdown
#Authorization: Basic {{token}}
#
#> {%
# import {validateStatus, validateContentType, validateResponseType} from "../utils";
#
# validateStatus(200, response, client);
# validateContentType("application/json", response, client);
# validateResponseType("boolean", response, client);
# %}

### tRPC

#POST {{trpc-client-url}}/shutdown
#Authorization: Basic {{token}}
#Content-Type: application/json
#
#{
#  "json": {}
#}
#
#> {%
# import {validateStatus, validateContentType, validateResponseType} from "../utils";
#
# validateStatus(200, response, client);
# validateContentType("application/json", response, client);
# validateResponseType("boolean", response, client, true);
# %}

### Reboot

#POST {{rest-client-url}}/reboot
#Authorization: Basic {{token}}
#
#> {%
# import {validateStatus, validateContentType, validateResponseType} from "../utils";
#
# validateStatus(200, response, client);
# validateContentType("application/json", response, client);
# validateResponseType("boolean", response, client);
# %}

### tRPC

#POST {{trpc-client-url}}/reboot
#Authorization: Basic {{token}}
#Content-Type: application/json
#
#{
#  "json": {}
#}
#
#> {%
# import {validateStatus, validateContentType, validateResponseType} from "../utils";
#
# validateStatus(200, response, client);
# validateContentType("application/json", response, client);
# validateResponseType("boolean", response, client, true);
# %}

### Execute

POST {{rest-client-url}}/execute
Authorization: Basic {{token}}
Content-Type: application/json

{
  "command": "echo hello world"
}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["response"], response, client);

  client.test("Response is command output", () => {
    // noinspection JSIncompatibleTypesComparison
    client.assert(response.body["response"] === "hello world\n", "Response is not command output");
  })
%}

### tRPC

POST {{trpc-client-url}}/execute
Authorization: Basic {{token}}
Content-Type: application/json

{
  "json": {
    "command": "echo hello world"
  }
}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["response"], response, client, true);

  client.test("Response is command output", () => {
    // noinspection JSIncompatibleTypesComparison
    client.assert(response.body["result"]["data"]["json"]["response"] === "hello world\n", `Response is not command output`);
  });
%}

### Screenshot

POST {{rest-client-url}}/screenshot
Authorization: Basic {{token}}
Content-Type: application/json

{
  "method": "response",
  "screens": [
    1
  ]
}

> {%
  import {validateStatus, validateContentType, validateArray} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateArray(response, client);
%}

### tRPC

POST {{trpc-client-url}}/screenshot
Authorization: Basic {{token}}
Content-Type: application/json

{
  "json": {
    "method": "response",
    "screens": [
      1
    ]
  }
}

> {%
  import {validateStatus, validateContentType, validateArray} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateArray(response, client, true);
%}

### BROWSERS

GET {{rest-client-url}}/browsers
Authorization: Basic {{token}}

> {%
  import {
    validateStatus,
    validateContentType,
    validateResponseType
  } from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateResponseType("object", response, client);
%}

### tRPC

GET {{trpc-client-url}}/getBrowsers?input={"json": {}}
Authorization: Basic {{token}}

> {%
  import {
    validateStatus,
    validateContentType,
    validateResponseType
  } from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateResponseType("object", response, client, true);
%}

### BROWSERS

DELETE {{rest-client-url}}/browsers
Authorization: Basic {{token}}

> {%
  import {
    validateStatus,
    validateContentType,
    validateResponseType
  } from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateResponseType("boolean", response, client);
%}

### DELAY

GET https://hub.dummyapis.com/delay?seconds=5

### tRPC

POST {{trpc-client-url}}/closeBrowsers
Authorization: Basic {{token}}
Content-Type: application/json

{
  "json": {}
}

> {%
  import {
    validateStatus,
    validateContentType,
    validateResponseType
  } from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateResponseType("boolean", response, client, true);
%}

### DELAY

GET https://hub.dummyapis.com/delay?seconds=5

### BROWSER

POST {{rest-client-url}}/browser
Authorization: Basic {{token}}
Content-Type: application/json

{
  "url": "http://localhost:8080",
  "displayId": 1
}

> {%
  import {
    validateStatus,
    validateContentType,
    validateResponseType
  } from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateResponseType("number", response, client);
  client.global.set("browserId", response.body.toString());
%}

### DELAY

GET https://hub.dummyapis.com/delay?seconds=3

###

GET {{rest-client-url}}/browser/{{browserId}}
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["displayId", "windowId", "url"], response, client);
%}

###

DELETE {{rest-client-url}}/browser/{{browserId}}
Authorization: Basic {{token}}

> {%
  import {
    validateStatus,
    validateContentType,
    validateResponseType
  } from "../utils";

  client.global.set("browserId", undefined);
  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateResponseType("boolean", response, client);
%}

### DELAY

GET https://hub.dummyapis.com/delay?seconds=5

###

POST {{trpc-client-url}}/openBrowser
Authorization: Basic {{token}}
Content-Type: application/json

{
  "json": {
    "displayId": 1,
    "url": "http://localhost:8080"
  }
}

> {%
  import {
    validateStatus,
    validateContentType,
    validateResponseType
  } from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateResponseType("number", response, client, true);
  client.global.set("browserId", response.body["result"]["data"]["json"].toString());
%}

### DELAY

GET https://hub.dummyapis.com/delay?seconds=3

###

GET {{trpc-client-url}}/getBrowser?input={"json": {"browserId":{{browserId}}}}
Authorization: Basic {{token}}

> {%
  import {validateStatus, validateContentType, validateKeys} from "../utils";

  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateKeys(["displayId", "url", "windowId"], response, client, true);
%}

###

POST {{trpc-client-url}}/closeBrowser
Authorization: Basic {{token}}
Content-Type: application/json

{
  "json": {
    "browserId": {{browserId}}
  }
}

> {%
  import {
    validateStatus,
    validateContentType,
    validateResponseType
  } from "../utils";

  client.global.set("browserId", undefined);
  validateStatus(200, response, client);
  validateContentType("application/json", response, client);
  validateResponseType("boolean", response, client, true);
%}

