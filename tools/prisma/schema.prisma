generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  // unique username
  username        String        @unique
  // optional unique email
  email           String?
  // salted + hashed password
  password        String
  // role - CREATOR, ADMIN
  role            String        @default("creator")
  // current refresh token
  refreshToken    RefreshToken?
  // projects user has created
  created         Project[]     @relation("creator")
  // projects user is collaborating on
  projectIds      String[]      @db.ObjectId
  projects        Project[]     @relation("collaborator", fields: [projectIds], references: [id])
  // invites to collaborate they have received
  invitesReceived Invite[]      @relation("recipient")
  // invites to collaborate they have sent
  invitesSend     Invite[]      @relation("sender")
}

model Invite {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  // date invite sent
  sent        DateTime @default(now())
  // invite status - PENDING, ACCEPTED, DECLINED
  status      String   @default("pending")
  // project invite is for collaboration on
  projectId   String   @db.ObjectId
  project     Project  @relation(fields: [projectId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  // sender of invite
  senderId    String   @db.ObjectId
  sender      User     @relation("sender", fields: [senderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  // receiver of invite
  recipientId String   @db.ObjectId
  recipient   User     @relation("recipient", fields: [recipientId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model RefreshToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  // unique token
  token   String   @unique
  // creation date
  created DateTime @default(now())
  // user the token authenticates
  userId  String   @unique @db.ObjectId
  user    User     @relation(fields: [userId], references: [id])
}

model Project {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  // project creator
  creatorId       String    @db.ObjectId
  creator         User      @relation("creator", fields: [creatorId], references: [id])
  // project collaborators - includes creator
  collaboratorIds String[]  @db.ObjectId
  collaborators   User[]    @relation("collaborator", fields: [collaboratorIds], references: [id])
  // creation date
  created         DateTime  @default(now())
  // last updated
  updated         DateTime  @default(now())
  // unique project title - auto generated until project saved permanently, otherwise an autogenerated, ephemeral ID is used
  title           String    @unique
  // project description
  description     String    @default("")
  // project thumbnail - optional use of AI generation?
  thumbnail       String?
  // project's related publications
  publications    String[]  @default([])
  // notes for project presenter
  presenterNotes  String    @default("")
  // notes on project
  notes           String    @default("")
  // layout
  layout          Section[]
  // project tags for grouping
  tags            String[]  @default([])
  // whether the project is publically available
  isPublic        Boolean   @default(false)
  // invites to users for collaboration
  invites         Invite[]
}

model Section {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  // width in %
  width     Float
  // height in %
  height    Float
  // section top-left x-coordinate in %
  x         Float
  // top-left y-coordinate in %
  y         Float
  // optional additional configuration for viewport etc.
  config    Json?
  // asset url
  asset     String
  // optional asset id for matching with S3 Store
  assetId   String?
  // data type associated with asset - can be auto-detected or specified
  dataType  String
  // states that the asset is included in
  states    String[] @default(["__default__"])
  // ordering for the section
  ordering  Int
  // project the section is part of
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?  @db.ObjectId
}
